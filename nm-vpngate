#!/usr/bin/env bash
#
# Yamada Hayao
# Twitter: @Hayao0819
# Email  : hayao@fascode.net
#
# (c) 2019-2021 Fascode Network.
#
# A script that makes it easy to connect Network Manager to a VPN Gate
# 
set -Eeu
CSV_SERVERLIST=()

#-- Message functions --#
_log(){   echo "[ LOG ]: ${*}" >&2; }
_info(){ 
    [[ "${MODE}" = "CLI" ]] && echo "[ INFO]: ${*}" >&2 && return 0
    zenity --info --text "${*}" --title="${APP_NAME}" --timeout 1
}
_warn(){  echo "[ WARN]: ${*}" >&2; }
_error(){ 
    [[ "${MODE}" = "CLI" ]] && echo "[ERROR]: ${*}" >&2 && return 0
    zenity --error --text "${*}" --title="${APP_NAME}" --timeout 1
}

#-- Config --#
script_path="$( cd -P "$( dirname "$(readlink -f "${0}")" )" && pwd )"
for _cfg in "${script_path}/nm-vpngate.conf" "/etc/nm-vpngate.conf" "${HOME}/.nm-vpngate.conf" "$(xdg-user-dir)/.config/nm-vpngate.conf"; do
    [[ ! -f "${_cfg}" ]] && continue
    source "${_cfg}" && _log "Loaded ${_cfg}" 
done

#-- Check terminal or GUI --#
#test -t 0 || MODE="GUI" && MODE="CLI"

#-- Funcions -#

# 質問を行う関数
# Returns only the selected result to standard output
# ask_question -d <デフォルト値> -p <質問文> <選択肢1> <選択肢2> ...
ask_question(){
    local arg OPTARG OPTIND _default="" _choice_list _count _choice _question _mark
    while getopts "d:p:" arg; do
        case "${arg}" in
            d) _default="${OPTARG}" ;;
            p) _question="${OPTARG}" ;;
            *) exit 1 ;;
        esac
    done
    shift "$((OPTIND - 1))" ; _choice_list=("${@}") _digit="${##}"

    (( ${#_choice_list[@]} < 0 )) && _error "An exception error has occurred." && exit 1
    (( ${#_choice_list[@]} <= 1 )) && echo "${_choice_list[*]}" && return 0

    [[ -v _question ]] && [[ ! "${_question}" = "" ]] && echo -e "${_question}" >&2

    for (( _count=1; _count<=${#_choice_list[@]}; _count++)); do
        _choice="${_choice_list[$(( _count - 1 ))]}" _mark=" "
        { [[ ! "${_default}" = "" ]] && [[ "${_choice}" = "${_default}" ]]; } && _mark="*"
        printf " ${_mark} %${_digit}d: ${_choice}\n" "${_count}" >&2
    done
    echo -n "(1 ~ ${#_choice_list[@]}) > " >&2 && read -r _input
    { printf "%s" "${_input}" | grep -qE "^[0-9]+$";} && { (( 1 <= _input)) && (( _input <= ${#_choice_list[@]} )); } || return 1 && echo "${_choice_list[$(( _input - 1 ))]}" && return 0
    for (( i=0; i <= ${#_choice_list[@]} - 1 ;i++ )); do
        [[ "${_choice_list["${i}"],,}" = "${_input,,}" ]] && echo "${_choice_list["${i}"]}" && return 0
    done
}

_script_usage(){
    echo "usage ${0} [options]"
    echo
    echo "A script that makes it easy to connect Network Manager to a VPN Gate"
    echo
    echo " General options:"
    echo "    -c | --cli                 Set the mode to CLI"
    echo "    -g | --gtk                 Set thr mode to GTK (GUI)"
    echo "    -t | --type [type]         Set the method of VPN (L2TP, OPENVPN)"
    echo "    -h | --help                Show this help and exit."
}

#-- Prepare environment --#
_prepare_env(){
    mkdir -p "${CONFIG_DIR}"
}

#-- Get server list from API or cache--#
_get_server_list(){
    _info "Getting and parsing the server list is in progress"
    if [[ -f "${CACHE_PATH}" ]]; then
        _log "Use cached server list in ${CACHE_PATH}"
        readarray -t CSV_SERVERLIST < <(grep -v "^\*" < "${CACHE_PATH}" | grep -v "^#")
    else
        _log "Getting server list from ${VPNGATE_CSV} ..."
        readarray -t CSV_SERVERLIST < <(curl -sL "${VPNGATE_CSV}" | grep -v "^\*" | grep -v "^#" | tee "${CACHE_PATH}")
    fi
}

#-- Filter server list --#
_filter_server_list(){
    # フィルターを処理
    local _Backup_CSV_SERVERLIST=("${CSV_SERVERLIST[@]}") _cnt _clm _var _empty=false
    CSV_SERVERLIST=()
    _log "Configured filters: ${!Target*}"
    while read -r _var; do
        _clm="$(tr "," "\n" <<< "${CSV_VARS}" | awk "{if (\$0 == \"${_var//Target/}\"){ print NR }}")"
        if  [[ -z "${_var}" ]] || [[ -z "$(eval "echo \${${_var}}")" ]]; then 
            _empty=true
            continue
        else
            _empty=false
        fi
        while read -r _cnt; do
            readarray -t -O "${#CSV_SERVERLIST[@]}" CSV_SERVERLIST < <(awk "BEGIN {FS=\",\"} {
                if (\$${_clm} == \"${_cnt}\" || \$${_clm} ~ /${_cnt}/ ){
                    print \$0
                }
            }" < <(printf "%s\n" "${_Backup_CSV_SERVERLIST[@]}"))
        done < <(tr "," "\n" < <(eval "echo \${${_var}}"))
    done < <(tr " " "\n" <<< "${!Target*}")

    # フィルター設定がすべて空の場合はすべてのサーバを対象にする
    [[ "${_empty}" = true ]] && CSV_SERVERLIST=("${_Backup_CSV_SERVERLIST[@]}")

    # 重複しているサーバを削除
    readarray -t CSV_SERVERLIST < <(printf "%s\n" "${CSV_SERVERLIST[@]}" | awk '!a[$0]++{print}')

    # サーバリストが空の場合は終了する
    if (( "${#CSV_SERVERLIST[@]}" == 0 )) || [[ -z "${CSV_SERVERLIST[*]}" ]]; then
        _error "No server found. Please check Target* configs."
        exit 1
    fi
    _log "${#CSV_SERVERLIST[@]} servers found."
}

#-- Parse server list --#
_parse_server_list(){
    local _cnt
    _log "Paring CSV ..."
    while read -r _cnt; do
        readarray -t "$(tr "," "\n" <<< "${CSV_VARS}" | head -n "${_cnt}" | tail -n 1)List" < <(printf "%s\n" "${CSV_SERVERLIST[@]}" | cut -d "," -f "${_cnt}")
    done < <(seq "1" "$(tr "," "\n" <<< "${CSV_VARS}" | wc -l)")
}

#-- Select server --#
_select_server_cli(){
    for _server in "${CSV_SERVERLIST[@]}"; do
        #readarray -t -O "${#_args[@]}" _args < <(tr "," "\n" <<< "${_server}" )
        _args+=("$(cut -d "," -f 1,2,7 <<< "${_server}")")
    done
    SelectedVPNName="$(ask_question -p "Please select server that you want to connect" "${_args[@]}" | cut -d "," -f 1)"
}
_select_server_gtk(){
    _log "Configuring graphical user interface ..."
    while read -r _var; do
        _args+=(--column="${_var}")
    done < <(tr "," "\n" <<< "${CSV_VARS}")
    for _server in "${CSV_SERVERLIST[@]}"; do
        readarray -t -O "${#_args[@]}" _args < <(tr "," "\n" <<< "${_server}" )
    done
    _args+=("--hide-column" "$(tr "," "\n" <<< "${CSV_VARS}" | wc -l)")
    SelectedVPNName="$(zenity --list --title="${APP_NAME}" --text="Please select server that you want to connect" "${_args[@]}")"
}

#-- Get server info from serner name --#
_get_server_from_name(){
    _log "Getting server information ..."
    if [[ -n "${SelectedVPNName-""}" ]]; then
        SelectedIndex=$(awk "BEGIN {FS=\",\"} {
            if (\$1 == \"${SelectedVPNName}\" ){
                print NR - 1
            }
        }" < <(printf "%s\n" "${CSV_SERVERLIST[@]}"))
    else
        _error "Failed to get server name"
        exit 1
    fi
    _log "Server name:${HostNameList[${SelectedIndex}]}, IP: ${IPList[${SelectedIndex}]}, Country: ${CountryShortList[${SelectedIndex}]}"
}

#-- Parse format --#
_parse_profile_name(){
    PROFILE_NAME="${PROFILE_NAME_FORMAT}"
    _log "Parsing name format"
    while read -r _cnt; do
        PROFILE_NAME="${PROFILE_NAME//$(tr "," "\n" <<< "${CSV_VARS}" | head -n "${_cnt}" | tail -n 1)/$(eval "echo \${$(tr "," "\n" <<< "${CSV_VARS}" | head -n "${_cnt}" | tail -n 1)List[${SelectedIndex}]}")}"
    done < <(seq "1" "$(tr "," "\n" <<< "${CSV_VARS}" | wc -l)")
}

#-- Set up connection --#
_setup_vpn_openvpn(){
    #-- Save ovpn file --#
    _log "Save OVPN file to ${CONFIG_DIR}/${PROFILE_NAME}.ovpn"
    echo -n "${OpenVPN_ConfigData_Base64List[${SelectedIndex}]}" |  base64 -di > "${CONFIG_DIR}/${PROFILE_NAME}.ovpn"

    #-- Import OVPN file --#
    _log "Import ${CONFIG_DIR}/${PROFILE_NAME}.ovpn"
    nmcli connection import type openvpn file "${CONFIG_DIR}/${PROFILE_NAME}.ovpn"
}

_setup_vpn_l2tp(){
    nmcli connection add \
        connection.id "${PROFILE_NAME}" con-name "${PROFILE_NAME}" type VPN vpn-type l2tp ifname -- \
        connection.autoconnect no ipv4.method auto vpn.data "gateway = ${IPList[${SelectedIndex}]}, ipsec-enabled = yes, ipsec-psk = <PSK>, mru = 1400, mtu = 1400, password-flags = 0, refuse-chap = yes, refuse-mschap = yes, refuse-pap = yes, require-mppe = yes, user = ${USERNAME}" vpn.secrets password="${PASSWORD}"
}

_setup_vpn(){
    if nmcli con | sed "1d" | cut -d " " -f 1 | grep -qx "${PROFILE_NAME}"; then
        _warn "${PROFILE_NAME} has been added to the Network Manager"
        _warn "Skip to add it and continue to connent"
        return 0
    fi
    case "${VPN_TYPE}" in
        "OPENVPN")
            _setup_vpn_openvpn
            ;;
        "L2TP")
            _setup_vpn_l2tp
            ;;
    esac
}

#-- Connect to VPN --#
_connect_vpn(){
    nmcli con up id "${PROFILE_NAME}" || _error "Network Manager has returned non-zero exit code."
    _info "Network Manager has been connected to VPN Gate (${PROFILE_NAME})"
}

#-- Parse argument --#
OPTS=("c" "g" "h" "t:") OPTL=("cli" "gtk" "type:" "help")
GETOPT=(-o "$(printf "%s," "${OPTS[@]}")" -l "$(printf "%s," "${OPTL[@]}")" -- "${@}")
getopt -Q "${GETOPT[@]}" || exit 1 # 引数エラー判定
readarray -t OPT < <(getopt "${GETOPT[@]}") # 配列に代入
eval set -- "${OPT[@]}"
unset OPT OPTS OPTL DEFAULT_ARGUMENT GETOPT

while true; do
    case "${1}" in
        -c | --cli     ) MODE="CLI"      ; shift 1 ;;
        -g | --gtk     ) MODE="GUI"      ; shift 1 ;;
        -t | --type    ) VPN_TYPE="${2}" ; shift 2 ;;
        --             ) shift 1         ; break   ;;
        *)
            _error "Argument exception error '${1}'"
            _error "Please report this error to the developer."
            exit 1
            ;;
    esac
done

#-- Run --#
_prepare_env
_get_server_list
_filter_server_list
_parse_server_list

case "${MODE}" in
    "GUI")
        _select_server_gtk
        ;;
    "CLI")
        _select_server_cli
        ;;
    *)
        _error "${MODE} is not correct"
        ;;
esac

_get_server_from_name
_parse_profile_name
_setup_vpn
_connect_vpn
